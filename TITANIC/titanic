import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
import warnings
warnings.filterwarnings('ignore')

# Cargar los datos originales para entrenar el modelo
df = pd.read_csv('titanic.csv')

# Función mejorada de preprocesamiento
def preprocess_data(df):
    data = df.copy()
    
    # Llenar valores faltantes
    data['Age'].fillna(data['Age'].median(), inplace=True)
    data['Embarked'].fillna(data['Embarked'].mode()[0], inplace=True)
    data['Fare'].fillna(data['Fare'].median(), inplace=True)
    
    # Extraer título del nombre
    data['Title'] = data['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)
    
    # Clasificar títulos
    title_mapping = {
        'Mr': 'Mr', 'Miss': 'Miss', 'Mrs': 'Mrs', 'Master': 'Master',
        'Dr': 'Professional', 'Rev': 'Professional', 'Col': 'Military',
        'Major': 'Military', 'Mlle': 'Miss', 'Ms': 'Miss', 'Mme': 'Mrs',
        'Lady': 'Nobility', 'Countess': 'Nobility', 'Sir': 'Nobility',
        'Don': 'Nobility', 'Jonkheer': 'Nobility', 'Dona': 'Nobility',
        'Capt': 'Military'
    }
    data['Title'] = data['Title'].map(title_mapping)
    data['Title'].fillna('Other', inplace=True)
    
    # Crear características adicionales
    data['FamilySize'] = data['SibSp'] + data['Parch'] + 1
    data['IsAlone'] = (data['FamilySize'] == 1).astype(int)
    data['IsChild'] = (data['Age'] < 18).astype(int)
    data['IsElderly'] = (data['Age'] > 60).astype(int)
    data['FarePerPerson'] = data['Fare'] / data['FamilySize']
    
    # Clasificar por tarifa
    data['FareCategory'] = pd.cut(data['Fare'], 
                                bins=[0, 25, 100, 600], 
                                labels=['Low', 'Medium', 'High'])
    
    # Codificar variables categóricas
    label_encoders = {}
    categorical_cols = ['Sex', 'Embarked', 'Title', 'FareCategory']
    
    for col in categorical_cols:
        le = LabelEncoder()
        data[col] = le.fit_transform(data[col].astype(str))
        label_encoders[col] = le
    
    # Seleccionar características para el modelo
    features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 
               'Embarked', 'FamilySize', 'IsAlone', 'IsChild', 
               'IsElderly', 'Title', 'FarePerPerson', 'FareCategory']
    
    return data[features], data['Survived'], label_encoders

# Preparar datos para el modelo
X, y, label_encoders = preprocess_data(df)

# Dividir en entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Entrenar el modelo
model = RandomForestClassifier(n_estimators=200, random_state=42, max_depth=10)
model.fit(X_train, y_train)

# Evaluar el modelo
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Precisión del modelo mejorado: {accuracy:.2%}")

# Función para procesar nuevos datos
def preprocess_new_data(new_data, label_encoders):
    features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 
               'Embarked', 'FamilySize', 'IsAlone', 'IsChild', 
               'IsElderly', 'Title', 'FarePerPerson', 'FareCategory']
    
    processed_data = {}
    
    # Procesar características básicas
    for feature in ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare']:
        if feature in new_data:
            processed_data[feature] = new_data[feature]
    
    # Procesar sexo
    if 'Sex' in new_data:
        sex_map = {'Masculino': 'male', 'Femenino': 'female', 'male': 'male', 'female': 'female'}
        processed_data['Sex'] = sex_map.get(new_data['Sex'], 'male')
    
    # Procesar puerto de embarque
    if 'Embarked' in new_data:
        embarked_map = {'C': 'C', 'Q': 'Q', 'S': 'S', 'Cherbourg': 'C', 
                       'Queenstown': 'Q', 'Southampton': 'S'}
        processed_data['Embarked'] = embarked_map.get(new_data['Embarked'], 'S')
    
    # Calcular características derivadas
    family_size = new_data.get('SibSp', 0) + new_data.get('Parch', 0) + 1
    processed_data['FamilySize'] = family_size
    processed_data['IsAlone'] = 1 if family_size == 1 else 0
    processed_data['IsChild'] = 1 if new_data.get('Age', 0) < 18 else 0
    processed_data['IsElderly'] = 1 if new_data.get('Age', 0) > 60 else 0
    processed_data['FarePerPerson'] = new_data.get('Fare', 0) / family_size
    
    # Categorizar tarifa
    fare = new_data.get('Fare', 0)
    if fare <= 25:
        processed_data['FareCategory'] = 'Low'
    elif fare <= 100:
        processed_data['FareCategory'] = 'Medium'
    else:
        processed_data['FareCategory'] = 'High'
    
    # Procesar título
    if 'Title' in new_data:
        title = new_data['Title']
    elif 'Name' in new_data:
        # Extraer título del nombre
        name_parts = new_data['Name'].split(', ')
        if len(name_parts) > 1:
            title_part = name_parts[1].split('.')[0]
            title_map = {
                'Mr': 'Mr', 'Miss': 'Miss', 'Mrs': 'Mrs', 'Master': 'Master',
                'Dr': 'Professional', 'Rev': 'Professional', 'Col': 'Military',
                'Major': 'Military', 'Lady': 'Nobility', 'Countess': 'Nobility',
                'Sir': 'Nobility', 'Don': 'Nobility', 'Capt': 'Military'
            }
            processed_data['Title'] = title_map.get(title_part, 'Other')
        else:
            processed_data['Title'] = 'Mr'
    else:
        processed_data['Title'] = 'Mr'
    
    # Codificar variables categóricas
    for col in ['Sex', 'Embarked', 'Title', 'FareCategory']:
        if col in processed_data and processed_data[col] in label_encoders[col].classes_:
            processed_data[col] = label_encoders[col].transform([processed_data[col]])[0]
        else:
            # Valor por defecto si no está en el encoder
            processed_data[col] = 0
    
    # Crear DataFrame final
    final_data = pd.DataFrame([processed_data], columns=features)
    
    return final_data

# Función para ingresar datos manualmente con opciones en español
def ingresar_datos_manual():
    print("\n" + "="*60)
    print("PREDICCIÓN DE SUPERVIVENCIA EN EL TITANIC - DATOS AVANZADOS")
    print("="*60)
    
    new_data = {}
    
    # Nombre (para extraer título)
    nombre = input("\nNombre completo: ")
    if nombre:
        new_data['Name'] = nombre
    
    # Título (opcional, se puede inferir del nombre)
    print("\nTítulos disponibles:")
    print("1. Sr/Mr  2. Sra/Mrs  3. Señorita/Miss  4. Master  5. Doctor/Dr")
    print("6. Militar  7. Nobleza  8. Otro")
    titulo_opcion = input("Seleccione título (1-8, Enter para inferir del nombre): ")
    titulo_map = {
        '1': 'Mr', '2': 'Mrs', '3': 'Miss', '4': 'Master', 
        '5': 'Professional', '6': 'Military', '7': 'Nobility', '8': 'Other'
    }
    if titulo_opcion in titulo_map:
        new_data['Title'] = titulo_map[titulo_opcion]
    
    # Clase
    print("\n--- CLASE SOCIAL ---")
    print("1. Primera clase (Alta sociedad, empresarios)")
    print("2. Segunda clase (Profesionales, clase media)")
    print("3. Tercera clase (Inmigrantes, clase trabajadora)")
    while True:
        try:
            pclass = int(input("Clase (1-3): "))
            if pclass in [1, 2, 3]:
                new_data['Pclass'] = pclass
                break
            else:
                print("Por favor ingrese 1, 2 o 3")
        except ValueError:
            print("Por favor ingrese un número válido")
    
    # Sexo
    print("\n--- DATOS PERSONALES ---")
    sexo = input("Sexo (Masculino/Femenino): ").capitalize()
    if sexo in ['Masculino', 'Femenino']:
        new_data['Sex'] = sexo
    
    # Edad
    while True:
        try:
            edad = float(input("Edad: "))
            if edad >= 0:
                new_data['Age'] = edad
                break
            else:
                print("La edad debe ser un número positivo")
        except ValueError:
            print("Por favor ingrese una edad válida")
    
    # Familia
    print("\n--- FAMILIA A BORDO ---")
    while True:
        try:
            hermanos = int(input("Número de hermanos/esposos a bordo: "))
            if hermanos >= 0:
                new_data['SibSp'] = hermanos
                break
            else:
                print("Debe ser un número positivo o cero")
        except ValueError:
            print("Por favor ingrese un número válido")
    
    while True:
        try:
            padres = int(input("Número de padres/hijos a bordo: "))
            if padres >= 0:
                new_data['Parch'] = padres
                break
            else:
                print("Debe ser un número positivo o cero")
        except ValueError:
            print("Por favor ingrese un número válido")
    
    # Información económica
    print("\n--- INFORMACIÓN ECONÓMICA ---")
    while True:
        try:
            tarifa = float(input("Tarifa pagada (£): "))
            if tarifa >= 0:
                new_data['Fare'] = tarifa
                break
            else:
                print("La tarifa debe ser un número positivo")
        except ValueError:
            print("Por favor ingrese una tarifa válida")
    
    # Puerto de embarque
    print("\n--- PUERTO DE EMBARQUE ---")
    print("C = Cherbourg (Francia)")
    print("Q = Queenstown (Irlanda)") 
    print("S = Southampton (Inglaterra)")
    while True:
        puerto = input("Puerto de embarque (C/Q/S): ").upper()
        if puerto in ['C', 'Q', 'S']:
            new_data['Embarked'] = puerto
            break
        else:
            print("Por favor ingrese C, Q o S")
    
    # Ocupación (información adicional)
    print("\n--- OCUPACIÓN (Opcional) ---")
    print("Ejemplos: Hombre de negocios, Servidor, Criada, Doctor, etc.")
    ocupacion = input("Ocupación: ")
    if ocupacion:
        new_data['Occupation'] = ocupacion
    
    return new_data

# Función para mostrar análisis detallado
def mostrar_analisis_detallado(new_data, prediction, probability):
    print("\n" + "="*60)
    print("ANÁLISIS DETALLADO DE SUPERVIVENCIA")
    print("="*60)
    
    # Factores clave que influyen en la supervivencia
    factores_positivos = []
    factores_negativos = []
    
    # Análisis basado en los datos ingresados
    if new_data.get('Sex') == 'Femenino':
        factores_positivos.append("Ser mujer (mayor tasa de supervivencia)")
    else:
        factores_negativos.append("Ser hombre (menor tasa de supervivencia)")
    
    if new_data.get('Pclass') == 1:
        factores_positivos.append("Primera clase (prioridad en botes salvavidas)")
    elif new_data.get('Pclass') == 3:
        factores_negativos.append("Tercera clase (acceso limitado a botes)")
    
    if new_data.get('Age') < 18:
        factores_positivos.append("Ser niño (prioridad en evacuación)")
    elif new_data.get('Age') > 60:
        factores_negativos.append("Edad avanzada (movilidad reducida)")
    
    if new_data.get('SibSp', 0) + new_data.get('Parch', 0) > 0:
        factores_positivos.append("Viajar con familia (ayuda mutua)")
    else:
        factores_negativos.append("Viajar solo (menos apoyo)")
    
    if new_data.get('Fare', 0) > 100:
        factores_positivos.append("Tarifa alta (mejor ubicación en el barco)")
    
    # Mostrar factores
    if factores_positivos:
        print("\n✅ FACTORES POSITIVOS:")
        for factor in factores_positivos:
            print(f"   • {factor}")
    
    if factores_negativos:
        print("\n❌ FACTORES NEGATIVOS:")
        for factor in factores_negativos:
            print(f"   • {factor}")
    
    # Resultado final
    print(f"\n🎯 PREDICCIÓN FINAL:")
    if prediction == 1:
        print("   ¡SOBREVIVIRÍA! 🎉")
        print(f"   Probabilidad: {probability[1]:.1%}")
    else:
        print("   NO SOBREVIVIRÍA 💀")
        print(f"   Probabilidad: {probability[0]:.1%}")
    
    # Estadísticas históricas
    print(f"\n📊 DATOS HISTÓRICOS:")
    print("   • Sobrevivieron 38% de los hombres")
    print("   • Sobrevivieron 74% de las mujeres") 
    print("   • Sobrevivieron 62% de los niños")
    print("   • Sobrevivieron 63% de primera clase")
    print("   • Sobrevivieron 43% de segunda clase")
    print("   • Sobrevivieron 25% de tercera clase")

# Función principal mejorada
def predecir_supervivencia_avanzado():
    print(f"Modelo entrenado con precisión del {accuracy:.2%}")
    print("Basado en datos reales de 891 pasajeros del Titanic")
    
    while True:
        # Ingresar datos
        new_data = ingresar_datos_manual()
        
        try:
            # Preprocesar y predecir
            processed_data = preprocess_new_data(new_data, label_encoders)
            prediction = model.predict(processed_data)[0]
            probability = model.predict_proba(processed_data)[0]
            
            # Mostrar análisis detallado
            mostrar_analisis_detallado(new_data, prediction, probability)
            
        except Exception as e:
            print(f"Error al procesar los datos: {e}")
        
        # Continuar?
        print("\n" + "="*60)
        continuar = input("¿Desea hacer otra predicción? (s/n): ").lower()
        if continuar != 's':
            print("\n¡Gracias por usar el predictor de supervivencia del Titanic!")
            print("Que tengas un buen día! ⚓")
            break

# Ejecutar el programa
if __name__ == "__main__":
    predecir_supervivencia_avanzado()